# Docker Compose for VIP English Learning Platform
# Simplified setup with PHP Backend + React Frontend + MySQL + Redis

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: vip-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: vip_english_learning
      MYSQL_USER: vip_user
      MYSQL_PASSWORD: vip_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - vip-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vip-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vip-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 10

  # PHP Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vip-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www/html
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vip-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vip-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - vip-network

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: vip-phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: vip_user
      PMA_PASSWORD: vip_password
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "8080:80"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - vip-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  vip-network:
    driver: bridge